extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.5"
    import: ["@key", "@shareable", "@external"]
  )
directive @relation(name: String!, direction: String!) on FIELD_DEFINITION

### Queries
type Query {
  "Returns a list of reviews for a given listing"
  searchReviews(criteria: SearchReviewsInput!): [Review]
  reviewsForListing(listingId: ID!): [Review]
  review(id: ID!): [Review]
  
}

### Mutations
type Mutation {
  "Creates a review for the guest - must be authored by the host of a past booking"
  submitGuestReview(
    guestReview: ReviewInput!
    bookingId: ID!
  ): SubmitGuestReviewResponse!

  "Creates a review for the host and location - only authorized users (hosts) can submit"
  submitHostAndLocationReviews(
    bookingId: ID!
    hostReview: ReviewInput!
    locationReview: ReviewInput!
  ): SubmitHostAndLocationReviewsResponse!
}

### Reviews
type Review @key(fields: "id") {
  id: ID!
  content: String!
  rating: Float!
  author: User! @relation(name: "AUTHORED_BY", direction: OUT)
  booking: Booking! @relation(name: "ASSOCIATED_WITH", direction: OUT)
  location: Location @relation(name: "BELONGS_TO", direction: OUT)
  guest: Guest @relation(name: "SUBMITTED_BY", direction: OUT)
  host: Host @relation(name: "REVIEWED_BY", direction: OUT)
  likes: [Like!] @relation(name: "HAS_LIKE", direction: OUT)
  dislikes: [Like!] @relation(name: "HAS_DISLIKE", direction: OUT)
  comments: [Comment!] @relation(name: "HAS_COMMENT", direction: OUT)
  createdAt: String!
  updatedAt: String!
}

input SearchReviewsInput {
  guestId: ID
  authorId: ID
  listingId: ID
  hostId: ID
  targetType: String
  comment: String
  limit: Int
  offset: Int
  sortBy: String
}

### Likes
type Like {
  id: ID!
  userId: ID!
  reviewId: ID!
  createdAt: String! 
  updatedAt: String!
  isPositive: Boolean! 
}

### Location Type
type Location @key(fields: "id") {
  id: ID! @shareable
  name: String! @shareable
}

### Input Types
input ReviewInput {
  content: String!
  rating: Float!
  locationId: ID
  guestId: ID
  bookingId: ID
  round: Int!
  hostId: ID
}

### Response Types
type SubmitHostAndLocationReviewsResponse implements MutationResponse {
  code: Int! @shareable
  success: Boolean! @shareable
  message: String! @shareable
  hostReview: Review @shareable
  locationReview: Review @shareable
}

type SubmitGuestReviewResponse implements MutationResponse {
  code: Int! @shareable
  success: Boolean! @shareable
  message: String! @shareable
  guestReview: Review @shareable
}

interface MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
}

### Bookings
type Booking @key(fields: "id") {
  id: ID!
}

### Listings
type Listing @key(fields: "id") {
  id: ID!
}

### User Types
interface User {
  id: ID!
  name: String!
  "The user's profile photo URL"
  picture: String!
}

type Host implements User @key(fields: "id") {
  id: ID!
  name: String! @shareable
  overallRating: Float @shareable
  picture: String! @shareable

}

type Guest implements User @key(fields: "id") {
  id: ID! @shareable 
  name: String! @shareable
  picture: String! @shareable
}

type Comment {
  id: ID!
  content: String! @shareable
  author: User! @shareable
  review: Review! @shareable
  createdAt: String! @shareable 
  updatedAt: String! @shareable
}