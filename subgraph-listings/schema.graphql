

extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.7"
    import: ["@key", "@shareable"]
  )

scalar DateTime
# Query definitions for retrieving listing data
extend type Query {
  "Returns the details about this listing"
  listing(id: ID!): Listing @shareable
  "A curated array of listings to feature on the homepage"
  featuredListings: [Listing!]! @shareable
  "Return the listings that belong to the currently logged-in host"
  hostListings: [Listing]! @shareable
  "Returns all possible amenities for a listing"
  listingAmenities: [Amenity!]! @shareable
  "Search results for listings that fit the criteria provided"
  searchListings(criteria: SearchListingsInput!): [Listing] @shareable
  "Returns the listings that match the criteria provided"
  listings(numOfBeds: Int, page: Int, limit: Int, sortBy: String): [Listing] @shareable
  "according to sale amount to sort"
  hotListingsByMoney: [Listing] @shareable
  "according to the number of bookings"
  hotListingsByBookingNumber: [Listing] @shareable
}


input UpdateListingStatusInput {
  id: ID!
  listingStatus: ListingStatus! 
}

enum ListingStatus{
  ACTIVE,
  PENDING,
  SOLD,
  DELETED,
  REJECT,
  CANCELLED,
  EXPIRED
  COMPLETED
}

type DeleteListingResponse implements Response{
  code: Int! @shareable 
  message: String! @shareable
  success: Boolean! @shareable
  listing: Listing @shareable
}

extend type Mutation {
  "Creates a new listing for the currently authenticated host"
  createListing(input: CreateListingInput!): CreateListingResponse! @shareable
  "Updates an existing listing"
  updateListing(
    listingId: ID!
    listing: UpdateListingInput!
  ): UpdateListingResponse! @shareable

   updateListingStatus(input: UpdateListingStatusInput!): UpdateListingStatusResponse @shareable
   deleteListing(input: DeleteListingInput!): DeleteListingResponse! @shareable
}

type UpdateListingStatusResponse implements Response {
  listingStatus: ListingStatus @shareable
  code: Int! @shareable 
  message: String! @shareable
  success: Boolean! @shareable
}

# Common interface for response types
interface Response {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}

input ReservedDateInput {
  checkInDate: String! 
  checkOutDate: String!
}

input DeleteListingInput {
  listingId: ID!
}

# Input type for creating a listing
input CreateListingInput {
  "The title of the listing"
  title: String!
  "The description of the listing"
  description: String
  "The price of the listing"
  price: Float!
  "The ID of the location"
  locationId: String!
  "The ID of the host"
  hostId: String!
  "The photo thumbnail of the listing"
  photoThumbnail: String!
  "The number of beds in the listing"
  numOfBeds: Int!
  "The cost per night of the listing"
  costPerNight: Float!
  "The type of location"
  locationType: LocationType!
  "The amenities of the listing"
  amenities: [AmenityInput!]!
  listingStatus: ListingStatus 
}

input AmenityInput {
  type: String! 
  description: String 
}

type Amenity @key(fields: "id") {
  id: ID!
  category: AmenityCategory! @shareable
  name: String! @shareable
}

enum AmenityCategory {
  ACCOMMODATION_DETAILS
  SPACE_SURVIVAL
  OUTDOORS
  UNKNOWN
}

input UpdateListingInput {
  "The listing's title"
  title: String
  "The listing's description"
  description: String
  "The thumbnail image for the listing"
  photoThumbnail: String
  "The number of beds available"
  numOfBeds: Int
  "The cost per night"
  costPerNight: Float
  "The location type of the listing"
  locationType: LocationType
  "The listing's amenities"
  amenities: [ID]
}

# Response type for creating a listing
type CreateListingResponse implements Response {
  code: Int! @shareable
  success: Boolean! @shareable
  message: String! @shareable
  listing: Listing @shareable
}

# Response type for updating a listing
type UpdateListingResponse implements Response {
  code: Int! @shareable
  success: Boolean! @shareable
  message: String! @shareable
  listing: Listing @shareable
}

# Type representing an amenity

# Enum representing the type of a listing location
enum LocationType {
  SPACESHIP
  HOUSE
  CAMPSITE
  APARTMENT
  ROOM
}

type ReservedDate @shareable{
  checkInDate: DateTime! 
  checkOutDate: DateTime!
}
# Enum representing sorting criteria for listings
enum SortByCriteria {
  COST_ASC
  COST_DESC
}

# Input type for searching listings
input SearchListingsInput {
reservedDate: ReservedDateInput!
  numOfBeds: Int
  page: Int
  limit: Int
  sortBy: SortByCriteria
  someListingIds: [ID!] # Add this field to the input type
}

# Type representing a listing
type Listing @key(fields: "id") {
  id: ID!
  title: String! @shareable
  description: String! @shareable
  photoThumbnail: String! @shareable
  numOfBeds: Int! @shareable
  costPerNight: Float! @shareable
  locationType: LocationType! @shareable
  host: Host! @shareable
  amenities: [Amenity!]! @shareable
  numberOfUpcomingBookings: Int! @shareable
  currentlyBookedDates: [ReservedDate]! @shareable
  totalCost(checkInDate: String!, checkOutDate: String!): Float @shareable
  coordinate: Coordinate @shareable
  saleAmount: Float @shareable
  bookingNumber: Int @shareable
  checkInDate: String! @shareable
  checkOutDate: String! @shareable
  listingStatus: ListingStatus @shareable
}

# Type representing a host
type Host @key(fields: "id") {
  id: ID!
 listing:[Listing] @shareable
}


# Type representing galactic coordinates for a listing
type Coordinate @shareable {
  latitude: Float! 
  longitude: Float! 
}
# Type representing a booking
type Booking @key(fields: "id") {
  id: ID!
  listing: Listing! @shareable
  guest: Guest! @shareable
  review: Review @shareable
}

# Type representing a review
type Review @key(fields: "id") {
  id: ID!
}

# Type representing a guest
type Guest @key(fields: "id") {
  id: ID!
  name: String! @shareable
}

