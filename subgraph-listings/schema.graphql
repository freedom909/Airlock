extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.7", 
        import: ["@key", "@shareable", "@provides","@external"])

extend type Query {
  "Returns the details about this listing"
  listing(id: ID!): Listing @shareable
  "A curated array of listings to feature on the homepage"
  featuredListings: [Listing!]! @shareable
  "Return the listings that belong to the currently logged-in host"
  hostListings: [Listing]! @shareable
  "Returns all possible amenities for a listing"
  listingAmenities: [Amenity!]! @shareable
  "Search results for listings that fit the criteria provided"
  searchListings(criteria: SearchListingsInput!): [Listing]! @shareable
  "Returns the listings that match the criteria provided"
  listings: [Listing] 
}

extend type Mutation {
  ### Listings
  "Creates a new listing for the currently authenticated host"
  createListing(listing: CreateListingInput!): CreateListingResponse! @shareable
  "Updates an existing listing"
  updateListing(
    listingId: ID!
    listing: UpdateListingInput!
  ): UpdateListingResponse! @shareable
}

interface MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}

"Used to create a listing"
input CreateListingInput {
  "The listing's title"
  title: String!
  "The listing's description"
  description: String!
  "The thumbnail image for the listing"
  photoThumbnail: String!
  "The number of beds available"
  numOfBeds: Int!
  "The cost per night"
  costPerNight: Float!
  "The location type of the listing"
  locationType: LocationType!
  "The listing's amenities"
  amenities: [ID!]!
}

"Updates the properties included. If none are given, don't update anything"
input UpdateListingInput {
  "The listing's title"
  title: String
  "The listing's description"
  description: String
  "The thumbnail image for the listing"
  photoThumbnail: String
  "The number of beds available"
  numOfBeds: Int
  "The cost per night"
  costPerNight: Float
  "The location type of the listing"
  locationType: LocationType
  "The listing's amenities"
  amenities: [ID]
}

type CreateListingResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The newly created listing"
  listing: Listing @shareable
}

"Response after updating a listing"
type UpdateListingResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The newly updated listing"
  listing: Listing @shareable
}

"A booking is reserved for a certain date range, marked by the checkInDate and checkOutDate fields"
type ReservedDate {
  "Date the guest checks in"
  checkInDate: String! @shareable
  "Date the guest checks out"
  checkOutDate: String! @shareable
}

"An amenity should be tied to a specific category."
type Amenity @key(fields: "id") {
  id: ID!
  "The category for the amenity"
  category: AmenityCategory! @shareable
  name: String! @shareable
}

"The category an amenity belongs to."
enum AmenityCategory {
  ACCOMMODATION_DETAILS
  SPACE_SURVIVAL
  OUTDOORS
}

"A listing can be one of these types."
enum LocationType {
  SPACESHIP
  HOUSE
  CAMPSITE
  APARTMENT
  ROOM
}

"Listings can be sorted by these options"
enum SortByCriteria {
  COST_ASC
  COST_DESC
}

"To search for a listing, you need these fields."
input SearchListingsInput {
  checkInDate: String!
  checkOutDate: String!
  numOfBeds: Int
  "The page in the search results, defaults to 1"
  page: Int
  "The number of listings you can display in a page, defaults to 5"
  limit: Int
  "The results sort order, defaults to cost descending"
  sortBy: SortByCriteria
}

"A listing is a location owned by a host. A listing has a list of amenities it offers. Listings have a fixed cost per night value."
type Listing @key(fields: "id") {
  id: ID!
  "The listing's title"
  title: String!
  "The listing's description"
  description: String!
  "The thumbnail image for the listing"
  photoThumbnail: String!
  "The number of beds available"
  numOfBeds: Int!
  "The cost per night"
  costPerNight: Float!
  "The location type of the listing"
  locationType: LocationType!
  "Owner of the listing"
  host: Host! @provides(fields: "id")
  "The amenities available for this listing"
  amenities: [Amenity!]! @shareable
  "The number of current and upcoming bookings for a listing"
  numberOfUpcomingBookings: Int!
  "An array of upcoming reserved dates that the listing has been booked for"
  currentlyBookedDates: [ReservedDate]! @shareable
  "Calculated total cost of the listing with the given arguments"
  totalCost(checkInDate: String!, checkOutDate: String!): Float!
  "Where this listing is located in the galaxy"
  coordinates: GalacticCoordinates @shareable
}

"Coordinates for the location of a listing"
type GalacticCoordinates @shareable {
  latitude: Float!
  longitude: Float!
}

type Host @key(fields: "id") {
  id: ID! @external
  listings: [Listing]
}

type Booking @key(fields: "id") {
  id: ID!
  listing: Listing!
  guest: Guest!
  review: Review
}

type Review @key(fields: "id") {
  id: ID!
}

type Guest @key(fields: "id") {
  id: ID!
  name: String!
}
