extend schema


  @link(
    url: "https://specs.apollo.dev/federation/v2.8",
    import: ["@key", "@shareable", "@external"]
  )

# Enums
enum Role {
  ADMIN
  HOST
  GUEST
}

# Scalars
scalar DateTime

# Common Interfaces
interface Node {
  id: ID!
}

interface Response {
  "Represents the status of the response"
  code: Int!
  "Indicates whether the operation was successful"
  success: Boolean!
  "Human-readable message for UI"
  message: String!
}

interface User @key(fields: "id") {
  id: ID!
  "The user's full name"
  name: String!
  "The user's role"
  role: Role!
  "The user's profile photo URL"
  picture: String
  "The nickname of the user"
  nickname: String!
  "e.g., GOOGLE, FACEBOOK, etc."
  provider: String!
}

# User Types
type Guest implements User @key(fields: "id") {
  id: ID!
  name: String!
  picture: String 
  nickname: String! 
  role: Role! 
  provider: String!
}

type Host implements User @key(fields: "id") {
  id: ID!
  name: String!
  picture: String 
  nickname: String! 
  role: Role! 
  provider: String!
  description: String @shareable
}

# Authentication Inputs
input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  password: String!
  name: String!
  nickname: String!
  role: Role = GUEST
  picture: String
  inviteCode: String
}

input UpdatePasswordInput {
  userId: ID!
  newPassword: String!
  password: String!
}

input ThirdPartyLoginInput {
  provider: String! # e.g., "GOOGLE", "FACEBOOK", etc.
  token: String! # Token from the third-party service
}

# Authentication Responses
type AuthPayload {
  token: String! 
  userId: ID!
  role: Role 
}

type SignInResponse implements Response {
  code: Int!
  success: Boolean!
  message: String!
  token: String!
  userId: ID!
  role: Role
}

type ThirdPartyLoginResponse implements Response {
  code: Int!
  success: Boolean!
  message: String!
  token: String! # JWT token after successful third-party login
  userId: ID!
  role: Role
}

# Profile Update
input UpdateProfileInput {
  name: String
  picture: String
  description: String
}

type UpdateProfileResponse implements Response {
  code: Int!
  success: Boolean!
  message: String!
  user: User
}

# Password and Invite Management
type ReqResetPwdResponse implements Response {
  code: Int!
  success: Boolean!
  message: String!
  link: String!
}

type ForgotPasswordResponse implements Response {
  code: Int!
  success: Boolean!
  message: String!
  email: String!
}

type InviteCodeResponse implements Response {
  code: Int!
  success: Boolean!
  message: String!
}

# Queries and Mutations
type Mutation {
  signUp(input: SignUpInput!): AuthPayload! 
  signIn(input: SignInInput!): SignInResponse!
  thirdPartyLogin(input: ThirdPartyLoginInput!): ThirdPartyLoginResponse!
  updateProfile(updateProfileInput: UpdateProfileInput): UpdateProfileResponse!
  updatePassword(newPassword: String!, password: String!, userId: ID!): AuthPayload!
  requestResetPassword(email: String!): ReqResetPwdResponse!
  forgotPassword(email: String!): ForgotPasswordResponse!
  sendInviteCode(email: String!): InviteCodeResponse!
  logout: Boolean!
  loginWithOAuth(provider: String!,token:String!): LoginWithOAuth!
}

type Query {
  getUser(id: ID!): User @shareable
}


# Federation and Service-Related
type _Service {
  sdl: String
}

scalar _Any
union _Entity = Host | Guest | Generator

type Generator {
  id: ID! @shareable
  name: String! @shareable
  description: String @shareable
  createdAt: DateTime! @shareable
  createdBy: User! @shareable
  isActive: Boolean! @shareable
}

type LoginWithOAuth {
  token: String!
  userId: ID!
  role: Role!
}

