extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.5", 
        import: ["@key", "@shareable"])

scalar DateTime

type Query {
  ### Bookings
  "All bookings for the given listing, optionally filtered by a BookingStatus"
  bookingsForListing(listingId: ID!, status: BookingStatus): [Booking]!
  "Current booking for guest based on current date"
  currentGuestBooking: Booking @shareable
  "Upcoming and current bookings for guest based on current date"
  upcomingGuestBookings: [Booking]! @shareable
  "Past bookings for guest based on current date"
  pastGuestBookings: [Booking]! @shareable
  "A list of bookings for the guest - must be authenticated as guest"
  guestBookings: [Booking]! @shareable 
  "Query type for fetching booking information"
  booking(id: ID!): Booking @shareable 
  "Query type for fetching booking information"
  bookingsForUser(userId: ID!): [Booking]  @shareable 
}

type CancelBookingResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int! @shareable 
  "Indicates whether the mutation was successful"
  success: Boolean! @shareable 
  "Human-readable message for the UI"
  message: String! @shareable 
  "The newly-created booking"
  booking: Booking @shareable 
}


type Mutation {
  ### Bookings
  createBooking(input: CreateBookingInput): CreateBookingResponse! @shareable
  cancelBooking(id: ID!): CancelBookingResponse @shareable
  confirmBooking(id: ID!): Booking @shareable 
  addFundsToWallet(amount: Float!): AddFundsToWalletResponse! @shareable
}

type AddFundsToWalletResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int! @shareable 
  "Indicates whether the mutation was successful"
  success: Boolean! @shareable 
  "Human-readable message for the UI"
  message: String! @shareable 
  "Updated wallet amount"
  amount: Float @shareable
}

"The status of a booking"
enum BookingStatus {
  CURRENT
  COMPLETED
  UPCOMING
}

"A booking is a reservation for a specific listing"
type Booking @key(fields: "id") {
  id: ID!
  "The listing associated with the reservation"
  listing: Listing! @shareable
  "The guest that reserved the location"
  guest: Guest! @shareable
  "The review associated with the reservation"
  review: Review @shareable
  "The guest that reserved the location"
  checkInDate: DateTime! @shareable
  "Check-out date for the reservation"
  checkOutDate: DateTime! @shareable
  "Total price paid, calculated using the listing's costPerNight and the check-in check-out dates"
  totalPrice: Float! @shareable 
  "The status of the booking - check BookingStatus type for all possibilities"
  status: BookingStatus! @shareable 
  "The booking was cancelled time"
  cancelledAt: DateTime @shareable 
  "The booking was confirmed time"
  confirmedAt: DateTime @shareable 
}

"A booking is reserved for a certain date range, marked by the checkInDate and checkOutDate fields"
type ReservedDate @shareable {
  "Date the guest checks in"
  checkInDate: DateTime! 
  "Date the guest checks out"
  checkOutDate: DateTime! 
}

"A listing is a location owned by a host. A listing has a list of amenities it offers. Listings have a fixed cost per night value."
type Listing @key(fields: "id") {
  id: ID!
  "The list of bookings for a listing"
  bookings: [Booking]! @shareable 
}

type Guest @key(fields: "id") {
  id: ID!
  "The list of bookings for a guest"
  bookings: [Booking]! @shareable 
}

type Review @key(fields: "id") {
  id: ID!
}

interface MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}

"Fields for creating a booking"
input CreateBookingInput {
  "ID of the listing associated with the booking"
  listingId: ID!
  "Date of check-in"
  checkInDate: DateTime!
  "Date of check-out"
  checkOutDate: DateTime!
}

"Minimum details needed for a newly created booking"
type NewBookingResponse @shareable {
  id: ID!
  checkInDate: DateTime!
  checkOutDate: DateTime!
}

"The response after creating a booking."
type CreateBookingResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int! @shareable 
  "Indicates whether the mutation was successful"
  success: Boolean! @shareable 
  "Human-readable message for the UI"
  message: String! @shareable 
  "The newly-created booking"
  booking: NewBookingResponse @shareable 
}
