extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.7", import: ["@key", "@shareable"])

type Mutation {
  "Creates a review for the guest - must be authored by host of past booking"
  submitGuestReview(guestReview: ReviewInput!, bookingId: ID!): SubmitGuestReviewResponse! @shareable
  # Creates a review for the host - can only be created if user is authorised to do so (i.e. has role 'HOST')
  submitHostAndLocationReviews(
    bookingId: ID!
    hostReview: ReviewInput!
    locationReview: ReviewInput!
  ): SubmitHostAndLocationReviewsResponse! @shareable
}

### Reviews
"A review consists of a numerical rating and written text. It can be written by a host or a guest."
type Review @key(fields: "id") @shareable {
  id: ID!
  "The numerical rating for the review target, on a scale of 1-5, with 5 being excellent."
  rating: Float! @shareable
  content: String! @shareable
  author: User! @shareable
  "The ID of the booking this review is about"
  bookingId: ID! @shareable
  "The ID of the location this review is about"
  locationId: ID @shareable
  "The ID of the guest this review is about"
  guestId: ID @shareable
  "The ID of the host this review is about"
  hostId: ID @shareable
  location: Location @shareable
}

type Location @key(fields: "id") @shareable {
  "A location is a physical location in the hotel, such as a room or a building."
  id: ID!
  name: String! 
}
"ReviewInput is the bare minimum needed to submit a review, not tied to any target."
input ReviewInput {
  text: String!
  rating: Float!
}

"The response after submitting reviews for both host and location together."
type SubmitHostAndLocationReviewsResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Newly created review about the host"
  hostReview: Review @shareable
  "Newly created review about the location"
  locationReview: Review @shareable
}

"The response after submitting reviews for a guest."
type SubmitGuestReviewResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Newly created review about the guest"
  guestReview: Review @shareable
}

interface MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}

### Bookings
"A booking is a reservation for a specific listing"
type Booking @key(fields: "id") {
  id: ID!
  "The guest's review of the location"
  locationReview: Review @shareable
  "The guest's review about the host"
  hostReview: Review @shareable
  "The host's review about the guest"
  guestReview: Review @shareable
}

type Listing @key(fields: "id") {
  id: ID!
  reviews: [Review]! @shareable
  "The overall calculated rating for a listing"
  overallRating: Float @shareable
}

#### User accounts
"Represents an Airlock user's common properties"
interface User {
  id: ID!
  name: String! 
}

"A host is a type of Airlock user. They own listings."
type Host implements User @key(fields: "id") {
  id: ID!
  name: String! @shareable
  "The overall calculated rating for the host"
  overallRating: Float @shareable
}

"A guest is a type of Airlock user. They book places to stay."
type Guest implements User @key(fields: "id") {
  id: ID!  
  name: String! @shareable
}
