extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.7", 
        import: ["@key", "@shareable"])


# SCALARS
scalar DateTime


type AuthPayload {
  token: String!
  userId: ID!
  role:Role
}

input UpdatePasswordInput {
  userId: ID!
  newPassword: String!
  password: String!
}


"Represents an Airlock user's common properties"
interface User @key(fields: "id") {
  id: ID!
  "The user's first and last name"
  name: String!
  "The user's role"
  role: Role!
  "The user's profile photo URL"
  picture: String!
  "The nickname of the user"
  nickname: String!
}

type Host implements User @key(fields: "id") {
  id: ID!
  "The user's first and last name"
  name: String! @shareable
  "The user's profile photo URL"
  picture: String! @shareable
  "The host's profile bio description, will be shown in the listing"
  description: String @shareable
  "The user's chosen nickname (must be unique)."
  nickname: String!
  "The role of the user"
  role: Role!
}

type Guest implements User @key(fields: "id") {
  id: ID!
  "The user's first and last name"
  name: String! @shareable
  "The user's profile photo URL"
  picture: String! @shareable
  "The user's chosen nickname (must be unique)."
  nickname: String!
  "The role of the user"
  role: Role!
}

enum Role {
  ADMIN
  GUEST
  HOST
}



interface MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}




interface Node {
  id: ID!
}

type _Service {
  sdl: String
}

type UserId {
  id: ID!
}

scalar _Any

union _Entity = Host | Guest | Generator


type Generator {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  createdBy: User!
  isActive: Boolean!
}

 type Mutation {

 updatePassword(input: UpdatePasswordInput!): AuthPayload!
 requestResetPassword(email: String!): MutationResponse!
}

